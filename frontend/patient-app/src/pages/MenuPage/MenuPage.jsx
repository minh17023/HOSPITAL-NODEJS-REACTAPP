// src/pages/MenuPage/MenuPage.jsx
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import client from "../../api/client";
import s from "./MenuPage.module.css";

// Helpers ƒë·ªçc th√¥ng tin phi√™n
const getPatient = () => {
  const raw = sessionStorage.getItem("PATIENT_INFO") || localStorage.getItem("PATIENT_INFO");
  return raw ? JSON.parse(raw) : null;
};
const hasValidBhyt = () => sessionStorage.getItem("HAS_VALID_BHYT") === "1";
const skippedBhyt = () => sessionStorage.getItem("SKIP_BHYT") === "1";
const pickModeFromSession = () => (hasValidBhyt() && !skippedBhyt() ? "bhyt" : "service");

export default function MenuPage() {
  const nav = useNavigate();
  const [patient, setPatient] = useState(null);
  const [checking, setChecking] = useState(true);

  // 1) L·∫•y patient t·ª´ storage
  useEffect(() => {
    const p = getPatient();
    if (!p) { nav("/"); return; }
    setPatient(p);
  }, [nav]);

  // 2) G·ªçi API check BHYT, l∆∞u v√†o sessionStorage (kh√¥ng TTL)
  useEffect(() => {
    if (!patient) return;
    setChecking(true);
    client
      .get(`/patients/${patient.idBenhNhan}/insurance/has-valid`)
      .then(({ data }) => {
        const ok = !!data?.hasValid;
        sessionStorage.setItem("HAS_VALID_BHYT", ok ? "1" : "0");
        if (ok && data.currentCard) {
          sessionStorage.setItem("CURRENT_BHYT", JSON.stringify(data.currentCard));
        } else {
          sessionStorage.removeItem("CURRENT_BHYT");
        }
      })
      .catch(() => {
        sessionStorage.setItem("HAS_VALID_BHYT", "0");
        sessionStorage.removeItem("CURRENT_BHYT");
      })
      .finally(() => setChecking(false));
  }, [patient]);

  // 3) ƒêi·ªÅu h∆∞·ªõng ‚Äì c·∫£ 2 n√∫t ƒë·ªÅu ch·ªçn mode d·ª±a tr√™n session
  const goStep1 = () => {
    const mode = pickModeFromSession();
    nav(`/flow/step-1?mode=${mode}`);
  };

  if (!patient) return null;

  return (
    <div className="container py-4">
      <div className="text-center mb-4">
        <h2 className="fw-bold">H·ªá Th·ªëng ƒêƒÉng K√Ω Kh√°m B·ªánh</h2>
        <p className="text-muted m-0">Ch·ªçn lo·∫°i d·ªãch v·ª• b·∫°n mu·ªën s·ª≠ d·ª•ng</p>
      </div>

      <div className={s.grid}>
        {/* Kh√°m BHYT (nh∆∞ng v·∫´n pick mode theo session) */}
        <button type="button" className={s.tile} onClick={goStep1} disabled={checking}>
          <div className={s.icon} style={{ background: "#2f6df1", color: "#fff" }}>‚ô•</div>
          <div className="flex-grow-1 text-start">
            <div className="fw-bold fs-5">Kh√°m B·∫£o Hi·ªÉm Y T·∫ø</div>
            <div className="text-muted">
              {checking
                ? "ƒêang ki·ªÉm tra th·∫ª..."
                : (hasValidBhyt() && !skippedBhyt() ? "S·ª≠ d·ª•ng th·∫ª BHYT" : "Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán BHYT ‚Üí kh√°m d·ªãch v·ª•")}
            </div>
          </div>
          <div className="fs-3 text-muted">‚Ä∫</div>
        </button>

        {/* Kh√°m D·ªãch V·ª• (y√™u c·∫ßu c·ªßa b·∫°n: c≈©ng check session; 1 ‚Üí bhyt, 0 ‚Üí service) */}
        <button type="button" className={s.tile} onClick={goStep1}>
          <div className={s.icon} style={{ background: "#10b981", color: "#fff" }}>‚ñ£</div>
          <div className="flex-grow-1 text-start">
            <div className="fw-bold fs-5">Kh√°m D·ªãch V·ª•</div>
            <div className="text-muted">
              {(hasValidBhyt() && !skippedBhyt()) ? "C√≥ th·∫ª BHYT ‚Üí d√πng BHYT" : "Kh√¥ng d√πng BHYT"}
            </div>
          </div>
          <div className="fs-3 text-muted">‚Ä∫</div>
        </button>

        <button type="button" className={s.tile} onClick={() => nav("/appointments")}>
          <div className={s.icon} style={{ background: "#8b5cf6", color: "#fff" }}>üïí</div>
          <div className="flex-grow-1 text-start">
            <div className="fw-bold fs-5">ƒê·∫∑t L·ªãch H·∫πn</div>
            <div className="text-muted">ƒêƒÉng k√Ω kh√°m theo th·ªùi gian</div>
          </div>
          <div className="fs-3 text-muted">‚Ä∫</div>
        </button>

        <button type="button" className={s.tile} onClick={() => nav("/results")}>
          <div className={s.icon} style={{ background: "#f59e0b", color: "#fff" }}>üßæ</div>
          <div className="flex-grow-1 text-start">
            <div className="fw-bold fs-5">Tra C·ª©u K·∫øt Qu·∫£</div>
            <div className="text-muted">Xem k·∫øt qu·∫£ kh√°m b·ªánh</div>
          </div>
          <div className="fs-3 text-muted">‚Ä∫</div>
        </button>
      </div>

      <div className="text-center text-muted mt-4">Phi√™n b·∫£n: v1.0.0</div>
    </div>
  );
}
