import { useEffect, useState } from "react";
import client from "../api/client";
import Stepper from "../components/Stepper";
import CccdPad from "../components/CccdPad";
import PatientForm from "../components/PatientForm";
import Summary from "../components/Summary";

export default function BhyTFlow() {
  const [step, setStep] = useState(1);
  const [cccd, setCccd] = useState("");
  const [showPad, setShowPad] = useState(false);
  const [loading, setLoading] = useState(false);
  const [patient, setPatient] = useState(null); // n·∫øu login th√†nh c√¥ng
  const [justCreated, setJustCreated] = useState(false);

  // b1: nh·∫≠p cccd ‚Üí g·ªçi login
  const handleSubmitCCCD = async (value) => {
    setShowPad(false);
    if (!value || value.length !== 12) return alert("Vui l√≤ng nh·∫≠p ƒë·ªß 12 s·ªë CCCD");
    setCccd(value);
    setLoading(true);
    try {
      const { data } = await client.post("/auth/patient/login", { cccd: value });
      localStorage.setItem("PATIENT_TOKEN", data.accessToken);
      setPatient(data.patient);
      setStep(2); // ƒë√£ c√≥ h·ªì s∆° ‚Üí qua ch·ªçn d·ªãch v·ª•
    } catch (e) {
      if (e?.response?.status === 404) {
        // ch∆∞a c√≥ h·ªì s∆° ‚Üí hi·ªÉn th·ªã form ƒëƒÉng k√Ω
        setPatient(null);
      } else {
        alert("L·ªói ƒëƒÉng nh·∫≠p");
      }
    } finally {
      setLoading(false);
    }
  };

  // b1 form ƒëƒÉng k√Ω (ch·ªâ khi patient = null)
  const handleRegister = async (payload) => {
    setLoading(true);
    try {
      const { data } = await client.post("/auth/patient/register", payload);
      localStorage.setItem("PATIENT_TOKEN", data.accessToken);
      setPatient(data.patient);
      setJustCreated(true);
      setStep(2);
    } catch (e) {
      alert(e?.response?.data?.message || "Kh√¥ng th·ªÉ ƒëƒÉng k√Ω");
    } finally {
      setLoading(false);
    }
  };

  // b2: ch·ªçn d·ªãch v·ª• (demo)
  const goPrint = () => setStep(3);

  return (
    <div className="container">
      <div className="topbar">
        <button className="back" onClick={() => window.history.back()}>&larr; Quay l·∫°i</button>
        <h2>ƒêƒÉng K√Ω Kh√°m B·ªánh BHYT</h2>
      </div>

      <Stepper step={step} />

      {step === 1 && (
        <div className="card">
          <h2 className="center">Nh·∫≠p S·ªë CCCD</h2>
          <p className="center">Vui l√≤ng nh·∫≠p s·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n (12 s·ªë)</p>
          <div className="cccd-box">
            <input
              placeholder="Nh·∫•n ƒë·ªÉ nh·∫≠p CCCD"
              value={cccd}
              onChange={(e) => setCccd(e.target.value.replace(/\D/g, "").slice(0, 12))}
              onFocus={() => setShowPad(true)}
            />
            <button className="btn" onClick={() => setShowPad(true)}>üì∑</button>
          </div>
          <button className="btn primary" disabled={loading} onClick={() => handleSubmitCCCD(cccd)}>
            X√°c nh·∫≠n
          </button>

          {/* n·∫øu ch∆∞a c√≥ h·ªì s∆° -> show form ngay d∆∞·ªõi (cho gi·ªëng demo c·ªßa b·∫°n) */}
          {!patient && cccd && (
            <>
              <h3 className="sep">Ch∆∞a c√≥ h·ªì s∆°? ƒêi·ªÅn th√¥ng tin ƒë·ªÉ ƒëƒÉng k√Ω</h3>
              <PatientForm cccd={cccd} loading={loading} onSubmit={handleRegister} />
            </>
          )}
        </div>
      )}

      {step === 2 && (
        <div className="card">
          <h2>Xin ch√†o, {patient?.hoTen}</h2>
          {justCreated && <div className="alert success">ƒê√£ t·∫°o h·ªì s∆° b·ªánh nh√¢n th√†nh c√¥ng.</div>}
          <p>Ch·ªçn d·ªãch v·ª• b·∫°n mu·ªën s·ª≠ d·ª•ng:</p>
          <div className="grid2">
            <button className="select-card" onClick={goPrint}>
              <div className="ic">üíô</div>
              <div><div className="title">Kh√°m BHYT</div><div className="sub">S·ª≠ d·ª•ng th·∫ª BHYT</div></div>
              <div className="chev">‚Ä∫</div>
            </button>
            <button className="select-card" onClick={goPrint}>
              <div className="ic">üü©</div>
              <div><div className="title">Kh√°m d·ªãch v·ª•</div><div className="sub">Kh√¥ng d√πng BHYT</div></div>
              <div className="chev">‚Ä∫</div>
            </button>
          </div>
        </div>
      )}

      {step === 3 && (
        <Summary
          patient={patient}
          onPrint={() => window.print()}
          onDone={() => window.location.assign("/")}
        />
      )}

      {showPad && (
        <CccdPad
          value={cccd}
          onClose={() => setShowPad(false)}
          onSubmit={handleSubmitCCCD}
        />
      )}
    </div>
  );
}
